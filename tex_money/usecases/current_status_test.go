package usecases

import (
	"reflect"
	"testing"
	"tex_money/config"
	"tex_money/domain"
)

func TestMakeCurrentStatusTbl(t *testing.T) {
	type args struct {
		moneySetting *domain.MoneySetting
		moneyList    *domain.MoneyList
	}
	tests := []struct {
		name string
		args args
		want *[domain.CASH_TYPE_SHITEI]int
	}{
		{
			name: "ok", // 不足
			args: args{
				moneySetting: &domain.MoneySetting{
					ExcessChangeCount: domain.ExcessChangeCount{
						ExRegisterDataTbl: [2]domain.ExRegisterDataTbl{
							{ // あふれ注意
								M10000Count: 20,
								M5000Count:  20,
								M2000Count:  20,
								M1000Count:  20,
								M500Count:   20,
								M100Count:   20,
								M50Count:    20,
								M10Count:    20,
								M5Count:     20,
								M1Count:     20,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
							{ // あふれエラー
								M10000Count: 25,
								M5000Count:  25,
								M2000Count:  25,
								M1000Count:  25,
								M500Count:   25,
								M100Count:   25,
								M50Count:    25,
								M10Count:    25,
								M5Count:     25,
								M1Count:     25,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
						},
					},
					ChangeShortageCount: domain.ChangeShortageCount{
						RegisterDataTbl: [2]domain.RegisterDataTbl{
							{ // 不足注意
								M10000Count: 5,
								M5000Count:  5,
								M2000Count:  5,
								M1000Count:  5,
								M500Count:   5,
								M100Count:   5,
								M50Count:    5,
								M10Count:    5,
								M5Count:     5,
								M1Count:     5,
								S500Count:   5,
								S100Count:   5,
								S50Count:    5,
								S10Count:    5,
								S5Count:     5,
								S1Count:     5,
							},
							{ // 不足エラー
								M10000Count: 3,
								M5000Count:  3,
								M2000Count:  3,
								M1000Count:  3,
								M500Count:   3,
								M100Count:   3,
								M50Count:    3,
								M10Count:    3,
								M5Count:     3,
								M1Count:     3,
								S500Count:   3,
								S100Count:   3,
								S50Count:    3,
								S10Count:    3,
								S5Count:     3,
								S1Count:     3,
							},
						},
					},
				},
				moneyList: &domain.MoneyList{
					M10000: 10, // 以下、不足のエラーで使う
					M5000:  10,
					M2000:  10,
					M1000:  10,
					M500:   10,
					M100:   10,
					M50:    10,
					M10:    10,
					M5:     10,
					M1:     10,
					S500:   10,
					S100:   10,
					S50:    10,
					S10:    10,
					S5:     10,
					S1:     10,
					A10000: 5, // 以下、あふれの計算で使う
					A5000:  5,
					A2000:  5,
					A1000:  5,
					A500:   5,
					A100:   5,
					A50:    5,
					A10:    5,
					A5:     5,
					A1:     5,
				},
			},
			want: &[domain.CASH_TYPE_SHITEI]int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "short_warning ALL", // 不足
			args: args{
				moneySetting: &domain.MoneySetting{
					ExcessChangeCount: domain.ExcessChangeCount{
						ExRegisterDataTbl: [2]domain.ExRegisterDataTbl{
							{ // あふれ注意
								M10000Count: 20,
								M5000Count:  20,
								M2000Count:  20,
								M1000Count:  20,
								M500Count:   20,
								M100Count:   20,
								M50Count:    20,
								M10Count:    20,
								M5Count:     20,
								M1Count:     20,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
							{ // あふれエラー
								M10000Count: 25,
								M5000Count:  25,
								M2000Count:  25,
								M1000Count:  25,
								M500Count:   25,
								M100Count:   25,
								M50Count:    25,
								M10Count:    25,
								M5Count:     25,
								M1Count:     25,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
						},
					},
					ChangeShortageCount: domain.ChangeShortageCount{
						RegisterDataTbl: [2]domain.RegisterDataTbl{
							{ // 不足注意
								M10000Count: 5,
								M5000Count:  5,
								M2000Count:  5,
								M1000Count:  5,
								M500Count:   5,
								M100Count:   5,
								M50Count:    5,
								M10Count:    5,
								M5Count:     5,
								M1Count:     5,
								S500Count:   5,
								S100Count:   5,
								S50Count:    5,
								S10Count:    5,
								S5Count:     5,
								S1Count:     5,
							},
							{ // 不足エラー
								M10000Count: 3,
								M5000Count:  3,
								M2000Count:  3,
								M1000Count:  3,
								M500Count:   3,
								M100Count:   3,
								M50Count:    3,
								M10Count:    3,
								M5Count:     3,
								M1Count:     3,
								S500Count:   3,
								S100Count:   3,
								S50Count:    3,
								S10Count:    3,
								S5Count:     3,
								S1Count:     3,
							},
						},
					},
				},
				moneyList: &domain.MoneyList{
					M10000: 4, // 以下、不足のエラーで使う
					M5000:  4,
					M2000:  4,
					M1000:  4,
					M500:   2,
					M100:   2,
					M50:    2,
					M10:    2,
					M5:     2,
					M1:     2,
					S500:   2,
					S100:   2,
					S50:    2,
					S10:    2,
					S5:     2,
					S1:     2,
					A10000: 5, // 以下、あふれの計算で使う
					A5000:  5,
					A2000:  5,
					A1000:  5,
					A500:   5,
					A100:   5,
					A50:    5,
					A10:    5,
					A5:     5,
					A1:     5,
				},
			},
			want: &[domain.CASH_TYPE_SHITEI]int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		},
		{
			name: "short Coin all warning Bill all Error", // 不足
			args: args{
				moneySetting: &domain.MoneySetting{
					ExcessChangeCount: domain.ExcessChangeCount{
						ExRegisterDataTbl: [2]domain.ExRegisterDataTbl{
							{ // あふれ注意
								M10000Count: 20,
								M5000Count:  20,
								M2000Count:  20,
								M1000Count:  20,
								M500Count:   20,
								M100Count:   20,
								M50Count:    20,
								M10Count:    20,
								M5Count:     20,
								M1Count:     20,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
							{ // あふれエラー
								M10000Count: 25,
								M5000Count:  25,
								M2000Count:  25,
								M1000Count:  25,
								M500Count:   25,
								M100Count:   25,
								M50Count:    25,
								M10Count:    25,
								M5Count:     25,
								M1Count:     25,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
						},
					},
					ChangeShortageCount: domain.ChangeShortageCount{
						RegisterDataTbl: [2]domain.RegisterDataTbl{
							{ // 不足注意
								M10000Count: 5,
								M5000Count:  5,
								M2000Count:  5,
								M1000Count:  5,
								M500Count:   5,
								M100Count:   5,
								M50Count:    5,
								M10Count:    5,
								M5Count:     5,
								M1Count:     5,
								S500Count:   5,
								S100Count:   5,
								S50Count:    5,
								S10Count:    5,
								S5Count:     5,
								S1Count:     5,
							},
							{ // 不足エラー
								M10000Count: 3,
								M5000Count:  3,
								M2000Count:  3,
								M1000Count:  3,
								M500Count:   3,
								M100Count:   3,
								M50Count:    3,
								M10Count:    3,
								M5Count:     3,
								M1Count:     3,
								S500Count:   3,
								S100Count:   3,
								S50Count:    3,
								S10Count:    3,
								S5Count:     3,
								S1Count:     3,
							},
						},
					},
				},
				moneyList: &domain.MoneyList{
					M10000: 2, // 以下、不足のエラーで使う
					M5000:  2,
					M2000:  2,
					M1000:  2,
					M500:   2,
					M100:   2,
					M50:    2,
					M10:    2,
					M5:     2,
					M1:     2,
					S500:   2,
					S100:   2,
					S50:    2,
					S10:    2,
					S5:     2,
					S1:     2,
					A10000: 5, // 以下、あふれの計算で使う
					A5000:  5,
					A2000:  5,
					A1000:  5,
					A500:   5,
					A100:   5,
					A50:    5,
					A10:    5,
					A5:     5,
					A1:     5,
				},
			},
			want: &[domain.CASH_TYPE_SHITEI]int{2, 2, 2, 2, 1, 1, 1, 1, 1, 1},
		},
		{
			name: "excess 1000 500 warning", // あふれ
			args: args{
				moneySetting: &domain.MoneySetting{
					ExcessChangeCount: domain.ExcessChangeCount{
						ExRegisterDataTbl: [2]domain.ExRegisterDataTbl{
							{ // あふれ注意
								M10000Count: 20,
								M5000Count:  20,
								M2000Count:  20,
								M1000Count:  20,
								M500Count:   20,
								M100Count:   20,
								M50Count:    20,
								M10Count:    20,
								M5Count:     20,
								M1Count:     20,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
							{ // あふれエラー
								M10000Count: 25,
								M5000Count:  25,
								M2000Count:  25,
								M1000Count:  25,
								M500Count:   25,
								M100Count:   25,
								M50Count:    25,
								M10Count:    25,
								M5Count:     25,
								M1Count:     25,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
						},
					},
					ChangeShortageCount: domain.ChangeShortageCount{
						RegisterDataTbl: [2]domain.RegisterDataTbl{
							{ // 不足注意
								M10000Count: 5,
								M5000Count:  5,
								M2000Count:  5,
								M1000Count:  5,
								M500Count:   5,
								M100Count:   5,
								M50Count:    5,
								M10Count:    5,
								M5Count:     5,
								M1Count:     5,
								S500Count:   5,
								S100Count:   5,
								S50Count:    5,
								S10Count:    5,
								S5Count:     5,
								S1Count:     5,
							},
							{ // 不足エラー
								M10000Count: 3,
								M5000Count:  3,
								M2000Count:  3,
								M1000Count:  3,
								M500Count:   3,
								M100Count:   3,
								M50Count:    3,
								M10Count:    3,
								M5Count:     3,
								M1Count:     3,
								S500Count:   3,
								S100Count:   3,
								S50Count:    3,
								S10Count:    3,
								S5Count:     3,
								S1Count:     3,
							},
						},
					},
				},
				moneyList: &domain.MoneyList{
					M10000: 10, // 以下、不足のエラーで使う
					M5000:  10,
					M2000:  10,
					M1000:  21,
					M500:   24,
					M100:   10,
					M50:    10,
					M10:    10,
					M5:     10,
					M1:     10,
					S500:   10,
					S100:   10,
					S50:    10,
					S10:    10,
					S5:     10,
					S1:     10,
					A10000: 5, // 以下、あふれの計算で使う
					A5000:  5,
					A2000:  5,
					A1000:  21,
					A500:   21,
					A100:   5,
					A50:    5,
					A10:    5,
					A5:     5,
					A1:     5,
				},
			},
			want: &[domain.CASH_TYPE_SHITEI]int{0, 0, 0, 3, 3, 0, 0, 0, 0, 0},
		},
		{
			name: "excess bill over coin over warning", // あふれ
			args: args{
				moneySetting: &domain.MoneySetting{
					ExcessChangeCount: domain.ExcessChangeCount{
						ExRegisterDataTbl: [2]domain.ExRegisterDataTbl{
							{ // あふれ注意
								M10000Count: 20,
								M5000Count:  20,
								M2000Count:  20,
								M1000Count:  20,
								M500Count:   20,
								M100Count:   20,
								M50Count:    20,
								M10Count:    20,
								M5Count:     20,
								M1Count:     20,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
							{ // あふれエラー
								M10000Count: 25,
								M5000Count:  25,
								M2000Count:  25,
								M1000Count:  25,
								M500Count:   25,
								M100Count:   25,
								M50Count:    25,
								M10Count:    25,
								M5Count:     25,
								M1Count:     25,
								BillOverBox: 100,
								CoinOverBox: 150,
							},
						},
					},
					ChangeShortageCount: domain.ChangeShortageCount{
						RegisterDataTbl: [2]domain.RegisterDataTbl{
							{ // 不足注意
								M10000Count: 5,
								M5000Count:  5,
								M2000Count:  5,
								M1000Count:  5,
								M500Count:   5,
								M100Count:   5,
								M50Count:    5,
								M10Count:    5,
								M5Count:     5,
								M1Count:     5,
								S500Count:   5,
								S100Count:   5,
								S50Count:    5,
								S10Count:    5,
								S5Count:     5,
								S1Count:     5,
							},
							{ // 不足エラー
								M10000Count: 3,
								M5000Count:  3,
								M2000Count:  3,
								M1000Count:  3,
								M500Count:   3,
								M100Count:   3,
								M50Count:    3,
								M10Count:    3,
								M5Count:     3,
								M1Count:     3,
								S500Count:   3,
								S100Count:   3,
								S50Count:    3,
								S10Count:    3,
								S5Count:     3,
								S1Count:     3,
							},
						},
					},
				},
				moneyList: &domain.MoneyList{
					M10000: 21, // 以下、不足のエラーで使う
					M5000:  21,
					M2000:  21,
					M1000:  21,
					M500:   21,
					M100:   21,
					M50:    21,
					M10:    21,
					M5:     21,
					M1:     21,
					S500:   10,
					S100:   10,
					S50:    10,
					S10:    10,
					S5:     10,
					S1:     10,
					A10000: 19, // 以下、あふれの計算で使う
					A5000:  19,
					A2000:  19,
					A1000:  19,
					A500:   20,
					A100:   20,
					A50:    20,
					A10:    20,
					A5:     20,
					A1:     20,
				},
			},
			want: &[domain.CASH_TYPE_SHITEI]int{3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		},
		{
			name: "excess bill over Error coin excess error", // あふれ&不足
			args: args{
				moneySetting: &domain.MoneySetting{
					ExcessChangeCount: domain.ExcessChangeCount{
						ExRegisterDataTbl: [2]domain.ExRegisterDataTbl{
							{ // あふれ注意
								M10000Count: 20,
								M5000Count:  20,
								M2000Count:  20,
								M1000Count:  20,
								M500Count:   20,
								M100Count:   20,
								M50Count:    20,
								M10Count:    20,
								M5Count:     20,
								M1Count:     20,
								BillOverBox: 50,
								CoinOverBox: 50,
							},
							{ // あふれエラー
								M10000Count: 25,
								M5000Count:  25,
								M2000Count:  25,
								M1000Count:  25,
								M500Count:   25,
								M100Count:   25,
								M50Count:    25,
								M10Count:    25,
								M5Count:     25,
								M1Count:     25,
								BillOverBox: 100,
								CoinOverBox: 100,
							},
						},
					},
					ChangeShortageCount: domain.ChangeShortageCount{
						RegisterDataTbl: [2]domain.RegisterDataTbl{
							{ // 不足注意
								M10000Count: 5,
								M5000Count:  5,
								M2000Count:  5,
								M1000Count:  5,
								M500Count:   5,
								M100Count:   5,
								M50Count:    5,
								M10Count:    5,
								M5Count:     5,
								M1Count:     5,
								S500Count:   5,
								S100Count:   5,
								S50Count:    5,
								S10Count:    5,
								S5Count:     5,
								S1Count:     5,
							},
							{ // 不足エラー
								M10000Count: 3,
								M5000Count:  3,
								M2000Count:  3,
								M1000Count:  3,
								M500Count:   3,
								M100Count:   3,
								M50Count:    3,
								M10Count:    3,
								M5Count:     3,
								M1Count:     3,
								S500Count:   3,
								S100Count:   3,
								S50Count:    3,
								S10Count:    3,
								S5Count:     3,
								S1Count:     3,
							},
						},
					},
				},
				moneyList: &domain.MoneyList{
					M10000: 2, // 以下、不足のエラーで使う
					M5000:  2,
					M2000:  2,
					M1000:  2,
					M500:   2,
					M100:   2,
					M50:    2,
					M10:    2,
					M5:     2,
					M1:     2,
					S500:   2,
					S100:   2,
					S50:    2,
					S10:    2,
					S5:     2,
					S1:     2,
					A10000: 19, // 以下、あふれの計算で使う
					A5000:  19,
					A2000:  19,
					A1000:  19,
					A500:   19,
					A100:   19,
					A50:    19,
					A10:    19,
					A5:     19,
					A1:     19,
				},
			},
			want: &[domain.CASH_TYPE_SHITEI]int{2, 2, 2, 2, 4, 4, 4, 4, 4, 4},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &currentStatus{
				overFlowBoxType: &config.OverFlowBoxType{
					CoinOverFlowBoxType: true,
					BillOverFlowBoxType: false,
				},
			}

			if got := c.makeCurrentStatusTbl(tt.args.moneySetting, tt.args.moneyList); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("currentStatus.makeCurrentStatusTbl() = %v, want %v", got, tt.want)
			}
		})
	}
}
